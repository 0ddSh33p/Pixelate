#pragma kernel Pixelate

RWTexture2D<float4> _Result;

int _BlockSize;
int _ResultWidth;
int _ResultHeight;

float4 _Colors[64];
int _numColors;

float diffCurr;
float diffMin;
float _Weight;
float _Red;
float _Green;
float _Blue;
    
[numthreads(64,1,1)]
void Pixelate (uint3 id : SV_DispatchThreadID)
{

    const float2 startPos = id.xy * _BlockSize;
    
    if (startPos.x >= _ResultWidth || startPos.y >= _ResultHeight)
        return;
    
    const int blockWidth = min(_BlockSize, _ResultWidth - startPos.x);
    const int blockHeight = min(_BlockSize, _ResultHeight - startPos.y);
    const int numPixels = blockHeight * blockWidth;

    float4 color = float4(0, 0, 0, 0);

    for (int i = 0; i < blockWidth; ++i)
    {
        for (int j = 0; j < blockHeight; ++j)
        {
            const uint2 pixelPos = uint2(startPos.x + i, startPos.y + j);
            color += _Result[pixelPos];
        }
    }
    color /= numPixels;



    for (int m = 0; m < blockWidth; ++m)
    {
        for (int n = 0; n < blockHeight; ++n)
        {
            const uint2 pixelPos = uint2(startPos.x + m, startPos.y + n);
            diffCurr = 3;
            diffMin = 100;

            for (int c = 0; c < _numColors; ++c){

                if(_Result[pixelPos].r < _Result[pixelPos].g && _Result[pixelPos].r < _Result[pixelPos].b) diffCurr =
					(abs((_Result[pixelPos].r * _Weight *_Red) - _Colors[c].r) + 
					abs((_Result[pixelPos].g * _Green) - _Colors[c].g) + 
					abs((_Result[pixelPos].b * _Blue) - _Colors[c].b));

                else if(_Result[pixelPos].g < _Result[pixelPos].r && _Result[pixelPos].g < _Result[pixelPos].b) diffCurr = 
					(abs((_Result[pixelPos].r *_Red) - _Colors[c].r) +
					abs((_Result[pixelPos].g * _Weight * _Green) - _Colors[c].g) +
					abs((_Result[pixelPos].b * _Blue) - _Colors[c].b));

                else diffCurr = 
					(abs((_Result[pixelPos].r *_Red) - _Colors[c].r) +
					abs((_Result[pixelPos].g * _Green) - _Colors[c].g) +
					abs((_Result[pixelPos].b * _Weight * _Blue) - _Colors[c].b));
                
                if (diffCurr <  diffMin){diffMin = diffCurr; color = float4(_Colors[c]);}
            }
        }
    }

    for (int l = 0; l < blockWidth; ++l)
    {
        for (int j = 0; j < blockHeight; ++j)
        {
            const uint2 pixelPos = uint2(startPos.x + l, startPos.y + j);
            _Result[pixelPos] = color;
        }
    }
}